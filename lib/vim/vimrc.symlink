" O HAI
" .vimrc
" @imkmf

" Plugins {{{

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" to be able to copy and paste from the clipboard
if system('uname -s') == "Darwin\n"
  "OSX
  set clipboard=unnamed
else
  "Linux
  set clipboard=unnamedplus
endif

set mouse=r

" let g:solarized_termcolors=256

" let Vundle manage Vundle, required
"" Vim config
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'endwise.vim'
Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'altercation/vim-colors-solarized'
Plugin 'junegunn/fzf'
Plugin 'tracyone/fzf-funky',{'on': 'FzfFunky'}
"" Shell/non-Vim interfacing
Plugin 'airblade/vim-gitgutter'
Plugin 'amiel/vim-tmux-navigator'
Plugin 'rking/ag.vim'
"" Language specific
Plugin 'fatih/vim-go'
Plugin 'jtratner/vim-flavored-markdown'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-ragtag'
Plugin 'pangloss/vim-javascript'
Plugin 'vim-ruby/vim-ruby'
Plugin 'hashivim/vim-terraform'
Plugin 'hynek/vim-python-pep8-indent'
Plugin 'posva/vim-vue'
" Plugin 'Lokaltog/vim-easymotion'
Plugin 'danro/rename.vim'
Plugin 'vim-scripts/copypath.vim'
Plugin 'tpope/vim-unimpaired'
Plugin 'jiangmiao/auto-pairs'
Plugin 'vim-scripts/Align'
Plugin 'nelstrom/vim-visual-star-search'
Plugin 'cyphactor/vim-open-alternate'
Plugin 'dkprice/vim-easygrep'
Plugin 'vim-scripts/visualrepeat'
Plugin 'mileszs/ack.vim'
Plugin 'jamessan/vim-gnupg'
Plugin 'ojroques/vim-oscyank'

let g:vue_pre_processors = []

let s:usestate = 0
" All of your Plugins must be added before the following line
call vundle#end()            " required

" }}}

" zavimrc settings {{{
"
" .vimrc folding
augroup filetype_vim
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
augroup END
" Fold with space
" nnoremap <space> za

" }}}

" Basics {{{

" Retain buffers until quit
set hidden

" No bells!
set visualbell

" Fast scrolling
set ttyfast

" Path/file expansion in colon-mode.
set wildmode=longest:full,list:full,list:longest
set wildchar=<TAB>

" Show wildmenu to navigate over options with tab
" for a command that is run
set wildmenu

" Autocomplete with dictionary words when spell check is on
set complete+=kspell

" Line numbers are nice
set ruler

" Backspace for normal people
set backspace=indent,eol,start

" Always show status
set laststatus=2

" Brace face
set showmatch
set matchtime=3

" Split down and right
set splitbelow
set splitright

" Read filetype stuff
filetype plugin on
filetype indent on

" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
set notimeout
set ttimeout
set ttimeoutlen=10

" Make Vim able to edit crontab files again.
set backupskip=/tmp/*,/private/tmp/*"

" Resize splits when the window is resized
au VimResized * :wincmd =

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set autoindent
set smarttab

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2

" Search shows all results
set hlsearch

" Line numbering
set number

" highlight 80th column
set colorcolumn=80

" keep 3 line and above and below the cursor
set scrolloff=3

" split into a new line
:nnoremap K i<CR><Esc>

let g:netrw_liststyle=3

" search for visually selected string
vnoremap // y/<C-R>"<CR>

" for htmk auto completion
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
let g:html_indent_inctags = "html,body,head,tbody"
" }}}

" History/Undo settings {{{

" We have computers with pretty big
" hard drives, so let's keep these
set history=1000
set undofile
set undodir=~/.vim/undo " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo
set backupdir=~/.vim/backup/
set directory=~/.vim/backup/
" }}}

" set the nocursorline
" set nocursorline

" Colors {{{
syntax enable
set background=light
colorscheme solarized
nnoremap H :set cursorline!<CR>

" ChangeBackground changes the background mode based on macOS's `Appearance`
" setting. We also refresh the statusline colors to reflect the new mode.
" Works only on MacOS.
" See: https://arslan.io/2021/02/15/automatic-dark-mode-for-terminal-applications/
function! ChangeBackground()
  if system("defaults read -g AppleInterfaceStyle") =~ '^Dark'
    set background=dark   " for the dark version of the theme
  else
    set background=light  " for the light version of the theme
  endif

  try
    execute "AirlineRefresh"
  catch
  endtry
endfunction
" initialize the colorscheme for the first run
call ChangeBackground()
" }}}

" Rspec command. Expects rspec executable to be present at +.vim/bin/rspec+
let g:rspec_command = "!.vim/bin/rspec {spec}"

" Key commands {{{

" Wrapped lines goes down/up to next row, rather than next line in file.
noremap j gj
noremap k gk

let mapleader = ","
let g:mapleader = ","

" Vertical split
nnoremap <leader>w <C-w>v<C-w>l
nnoremap <leader>\| <C-w>v<C-w>l
" Horizontal split
nnoremap <leader>h <C-w>s<C-w>l
nnoremap <leader>- <C-w>s<C-w>l

" resize window to fullsize or otherwise
nnoremap <leader>+ <C-w>_<C-w>\|
nnoremap <leader>= <C-w>=

" j-k smash
inoremap jk <esc>
inoremap kj <esc>

" Save, yo
nnoremap <cr> :w<cr>

" Switch between dark and light backgrounds
nnoremap <Leader>bg :let &background = ( &background == "dark"? "light" : "dark" )<CR>

" Start FZF
nmap <leader>ff :FZF<CR>

" Better command keys
nnoremap ; :

" Buffer commands
nmap <c-b> :bprevious<CR>
nmap <c-n> :bnext<CR>

" Turn off nohlsearch
nmap <silent> <leader><Space> :nohlsearch<CR>

" Switch between files with ,,
nnoremap <leader><leader> <c-^>

" Ruby hashrocket madness
nnoremap <leader>r :%s/:\(\w*\)\s*=>\s*/\1: /gc<cr>

" Copy file path/name to clipboard
" Copy current buffer path relative to root of VIM session to system clipboard
" nnoremap <Leader>yrp :let @+=expand("%")<cr>:echo "Copied relative file path to clipboard - ".expand("%")<cr>
" Copy current buffer path relative to root of VIM session using +oscyank+
nnoremap <Leader>yrp :call YankOSC52(expand("%"))<cr>:echo "Copied relative file path to clipboard - ".expand("%")<cr>

" Copy current buffer full path
" nnoremap <Leader>yp :let @+=expand("%:p")<cr>:echo "Copied file path to clipboard - ".expand("%:p")<cr>
" Copy current buffer full path using +oscyank+
nnoremap <Leader>yp :call YankOSC52(expand("%:p"))<cr>:echo "Copied file path to clipboard - ".expand("%:p")<cr>

" Copy current filename to system clipboard
"nnoremap <Leader>yf :let @+=expand("%:t")<cr>:echo "Copied file name to clipboard - ".expand("%:t")<cr>
" Copy current filename using +oscyank+
nnoremap <Leader>yf :call YankOSC52(expand("%:t"))<cr>:echo "Copied file name to clipboard - ".expand("%:t")<cr>

" Copy current buffer path without filename to system clipboard
" nnoremap <Leader>yd :let @+=expand("%:h")<cr>:echo "Copied file directory to clipboard - ".expand("%:h")<cr>
" Copy current buffer path without filename using +oscyank+
nnoremap <Leader>yd :call YankOSC52(expand("%:h"))<cr>:echo "Copied file directory to clipboard - ".expand("%:h")<cr>


" }}}

" Filetypes {{{

" Remove trailing whitespace in files
autocmd BufWritePre * :%s/\s\+$//e

augroup trailing
    au!
    au InsertEnter * :set listchars-=trail:⌴
    au InsertLeave * :set listchars+=trail:⌴
augroup END

augroup markdown
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

augroup handlebars
    au!
    au BufNewFile,BufRead *.hbs,*.hbs.ember setlocal filetype=mustache
augroup END

augroup ssml
    au!
    au BufNewFile,BufRead *.ssml.erb setlocal filetype=eruby.xml
augroup END

augroup ft_go
    au!

    au Filetype go setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
    au Filetype go setlocal nolist
augroup END

" }}}

" Plugins {{{

if executable('ag')
  let g:ackprg = 'ag --vimgrep'

  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
endif

"" Disable warnings for +vim-go+ that appear everytime vim is started.
"" Happens when +go+ is not installed on the host machine.
let g:go_version_warning = 0

"" Ignore rules

set wildignore+=*/tmp/*,*.so,*.swp,*.zip              " MacOSX/Linux
set wildignore+=*/node_modules/*,*/bower_components/* " Node.js
set wildignore+=*/dist/*                   " Meh
set wildignore+=*/.bundle/* " Ruby


" fzf-funky
nnoremap <Leader>fu :FzfFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'FzfFunky ' . expand('<cword>')<Cr>

" Ignore .gitignore'd files in FZF
let $FZF_DEFAULT_COMMAND = 'ag -g ""'

" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme="solarized"
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''

" OpenAlternate
nnoremap <leader>. :OpenAlternate<cr>

" Gitgutter
highlight clear SignColumn
highlight GitGutterAdd ctermfg=green guifg=darkgreen
highlight GitGutterChange ctermfg=yellow guifg=darkyellow
highlight GitGutterDelete ctermfg=red guifg=darkred
highlight GitGutterChangeDelete ctermfg=yellow guifg=darkyellow

" disable folding
set nofoldenable

" }}}


""  terraform {{
let g:terraform_align=1
let g:terraform_fmt_on_save=1
" }}}

" Custom Functions and Mapping {{{

"Use TAB to complete when typing words, else inserts TABs as usual.
"Uses dictionary and source files to find matching words to complete.

"See help completion for source,
"Note: usual completion is on <C-n> but more trouble to press all the time.
"Never type the same word twice and maybe learn a new spellings!
"Use the Linux dictionary when spelling is in doubt.
"Window users can copy the file to their machine.
function! Tab_Or_Complete()
  if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
    return "\<C-N>"
  else
    return "\<Tab>"
  endif
endfunction
:inoremap <Tab> <C-R>=Tab_Or_Complete()<CR>
:set dictionary="/usr/dict/words"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
" from  https://amix.dk/vim/vimrc.html
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
map <c-space> ?

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
" Don't let netrw override <C-l> to move between windows
" https://vi.stackexchange.com/a/5532
augroup netrw_mapping
  autocmd!
  autocmd filetype netrw call NetrwMapping()
augroup END
function! NetrwMapping()
  nnoremap <silent> <buffer> <C-j> <C-W>j
  nnoremap <silent> <buffer> <C-k> <C-W>k
  nnoremap <silent> <buffer> <C-h> <C-W>h
  nnoremap <silent> <buffer> <C-l> <C-W>l
endfunction

" Close the current buffer
map <leader>bd :Bclose<cr>

" Close all the buffers
map <leader>ba :1,1000 bd!<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
" Remember info about open buffers on close
set viminfo^=%

vnoremap <silent> <leader>p "+gp
" vnoremap <silent> <leader>y "+y
vnoremap <leader>y :OSCYank<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vimgrep searching and cope displaying
" from
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSelection('gv')<CR>

" Open vimgrep and put the cursor in the right position
map <leader>g :noautocmd vimgrep // **/*.<left><left><left><left><left><left><left>
map <leader>r :call GlobalReplace()

function! GlobalReplace()
  execute "set nomore"
  " Remember to do argadd **/* before trying to replace globally
  call CmdLine("argdo %s" . '///gce | update<left><left><left><left><left><left><left><left><left><left><left><left><left>')
endfunction

" Vimgreps in the current file
map <leader><space> :noautocmd vimgrep // <C-R>%<C-A><right><right><right><right><right><right><right><right><right>

" When you press gr you can search and replace the selected text
vnoremap <silent> rg :call VisualSelection('replace')<CR>
vnoremap <silent> Rg :call VisualSelection('global_replace')<CR>

" Do :help cope if you are unsure what cope is. It's super useful!
"
" When you search with vimgrep, display your results in cope by doing:
"   <leader>cc
"
" To go to the next search result do:
"   <leader>n
"
" To go to the previous search results do:
"   <leader>p
"
map <leader>cc :botright cope<cr>
map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg
map <leader>n :cn<cr>
map <leader>p :cp<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("noautocmd vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '//gce<left><left><left><left>')
    elseif a:direction == 'global_replace'
        " Remember to do argadd **/* before trying to replace globally
        execute "set nomore"
        call CmdLine("argdo %s" . '/'. l:pattern . '//gce | update<left><left><left><left><left><left><left><left><left><left><left><left><left>')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    elseif a:direction == 'clip_yank'
        execute "\"+gy"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction


" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

" Don't use popupwindow for FZF
" let g:fzf_layout = { 'down': '40%' }

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

" }}}
"

" Working with GPG encrypted files
" http://www.futurile.net/2017/05/14/editing-encrypting-files-with-gnupg-vim/
let g:GPGPreferArmor=1
let g:GPGPreferSign=1
let g:GPGDefaultRecipients=["srivishnu@totakura.in"]

" Timeout looking for matching paranthesis for +matchparen+ plugin
" See: https://vi.stackexchange.com/a/5318
let g:matchparen_timeout = 2
let g:matchparen_insert_timeout = 2

" Use +matchit+ to better match do's and end's for ruby scripts
runtime macros/matchit.vim
